name: Pipeline for Fitness Tracker App

on:
  push:
    branches:
      - development
      - qa
      - uat
      - staging
  
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: fitness_tracker
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          echo "Starting dependency installation..."
          pip install -r requirements.txt
          echo "Dependencies installed successfully."

      - name: Run Database Migrations
        run: |
          echo "Running database migrations..."
          python manage.py migrate
          echo "Database migrations completed."

      - name: Run Tests
        run: |
          echo "Running tests..."
          python manage.py test
          echo "All tests passed."

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request_review.state == 'approved'
    strategy:
      matrix:
        environment: [development, qa, uat, staging, production]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          echo "Installing dependencies for deployment to ${{ matrix.environment }}..."
          pip install -r requirements.txt
          echo "Dependencies installed for ${{ matrix.environment }}."

      - name: Collect Static Files
        run: |
          echo "Collecting static files for ${{ matrix.environment }}..."
          python manage.py collectstatic --noinput
          echo "Static files collected for ${{ matrix.environment }}."

      - name: Deploy to ${{ matrix.environment }}
        env:
          HOST: ${{ secrets["${{ matrix.environment }}_SERVER_HOST"] }}
          USER: ${{ secrets["${{ matrix.environment }}_SERVER_USER"] }}
          PASSWORD: ${{ secrets["${{ matrix.environment }}_SERVER_PASSWORD"] }}
        run:
          echo "Deploying to ${{ matrix.environment }} environment..."
          sshpass -p $PASSWORD ssh $USER@$HOST <<EOF
            echo "Connecting to ${{ matrix.environment }} server..."

            cd fitness_tracker_site || { echo "Directory not found!"; exit 1; }
          echo "Pulling the latest code from the main branch..."
            git pull origin main || { echo "Git pull failed!"; exit 1; }

            echo "Activating virtual environment..."
            source .venv/bin/activate || { echo "Virtual environment not found!"; exit 1; }

          echo "Installing project requirements..."
            pip install -r requirements.txt || { echo "Failed to install requirements!"; exit 1; }

            echo "Running database migrations..."
            python manage.py migrate || { echo "Database migrations failed!"; exit 1; }

            echo "Collecting static files..."
            python manage.py collectstatic --noinput || { echo "Collectstatic failed!"; exit 1; }

            echo "Restarting application service..."
            sudo systemctl restart your_project.service || { echo "Failed to restart the service!"; exit 1; }

            echo "Deployment to ${{ matrix.environment }} completed successfully!"